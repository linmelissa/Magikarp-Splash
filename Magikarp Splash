import pygame
from sys import exit
from random import randint

class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        
        magikarp_1 = pygame.image.load('graphics/magikarp/1.png').convert_alpha()
        magikarp_1 = pygame.transform.rotozoom(magikarp_1, -20, 1.5)
        magikarp_1 = pygame.transform.flip(magikarp_1, True, False)
        magikarp_2 = pygame.image.load('graphics/magikarp/2.png').convert_alpha()
        magikarp_2 = pygame.transform.rotozoom(magikarp_2, -10, 1.5)
        magikarp_2 = pygame.transform.flip(magikarp_2, True, False)
        magikarp_3 = pygame.image.load('graphics/magikarp/3.png').convert_alpha()
        magikarp_3 = pygame.transform.rotozoom(magikarp_3, -20, 1.5)
        magikarp_3 = pygame.transform.flip(magikarp_3, True, False)

        self.karp_swim = [magikarp_1, magikarp_2, magikarp_3]
        self.karp_index = 0
        self.karp_jump = pygame.image.load('graphics/magikarp/3.png').convert_alpha()
        self.karp_jump = pygame.transform.flip(magikarp_3, True, False)
        self.karp_jump = pygame.transform.rotozoom(magikarp_3, 20, 1)

        self.image = self.karp_swim[self.karp_index]
        self.rect = self.image.get_rect(midbottom = (80,300))
        self.gravity = 0

        self.jump_sound = pygame.mixer.Sound('audio/splash.wav')
        self.jump_sound.set_volume(0.3)




    def player_input(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_SPACE] and self.rect.bottom >= 300:
            self.gravity = -22
            self.jump_sound.play()

    def apply_gravity(self):
        self.gravity += 1
        self.rect.y += self.gravity
        if self.rect.bottom >= 300:
            self.rect.bottom = 300

    def animation_state(self):
        if self.rect.bottom < 300:
            self.image = self.karp_jump
        else:
            self.karp_index += 0.1
            if self.karp_index >= len(self.karp_swim):self.karp_index = 0
            self.image = self.karp_swim[int(self.karp_index)]

    def update(self):
        self.player_input()
        self.apply_gravity()
        self.animation_state()

class Level(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__()
        if type == 'rare candy':
            rare_candy = pygame.image.load('graphics/rare candy.png').convert_alpha()
            self.frames = [rare_candy,rare_candy]
            y_pos = 180
        
        self.animation_index = 0
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (randint(900,1100),y_pos))

    def update(self):
        self.rect.x -= 6
        self.destroy()

    def destroy(self):
        global score
        if self.rect.x <= -100: 
            self.kill()
        elif pygame.sprite.spritecollide(player.sprite, level_up_group, True):
            self.kill()
            score += 1
            chomp_sound = pygame.mixer.Sound('audio/chomp.mp3')
            chomp_sound.set_volume(0.3)
            chomp_sound.play()

class Obstacle(pygame.sprite.Sprite):
    def __init__(self,type):
        super().__init__()
        if type == 'remoraid':
            remoraid_1 = pygame.image.load('graphics/remoraid/1.png').convert_alpha()
            remoraid_1 = pygame.transform.rotozoom(remoraid_1, 10, 1.3)
            remoraid_2 = pygame.image.load('graphics/remoraid/2.png').convert_alpha()
            remoraid_2 = pygame.transform.rotozoom(remoraid_2, 10, 1.3)
            remoraid_3 = pygame.image.load('graphics/remoraid/3.png').convert_alpha()
            remoraid_3 = pygame.transform.rotozoom(remoraid_3, 10, 1.3)
            remoraid_4 = pygame.image.load('graphics/remoraid/4.png').convert_alpha()
            remoraid_4 = pygame.transform.rotozoom(remoraid_4, 10, 1.3)

        self.frames = [remoraid_1, remoraid_2, remoraid_3,remoraid_4]
        y_pos  = 300

        self.animation_index = 0
        self.image = self.frames[self.animation_index]
        self.rect = self.image.get_rect(midbottom = (randint(900,1100),y_pos))

    def animation_state(self):
        self.animation_index += 0.1 
        if self.animation_index >= len(self.frames): self.animation_index = 0
        self.image = self.frames[int(self.animation_index)]

    def update(self):
        self.animation_state()
        self.rect.x -= 6
        self.destroy()

    def destroy(self):
        if self.rect.x <= -100: 
            self.kill()

# if touch remoraid
def collision_sprite():
    death_sound = pygame.mixer.Sound('audio/karp_cry.ogg')
    death_sound.set_volume(0.1)
    if pygame.sprite.spritecollide(player.sprite,obstacle_group,False):
        obstacle_group.empty()
        death_sound.play()
        return False
    else: 
        return True

def display_score():
    global score
    if pygame.sprite.spritecollide(player.sprite, level_up_group, True):
        score += 1
    score_surface = font.render(f'Level: {score}', False,(64,64,64))
    score_rectangle = score_surface.get_rect(center = (400, 50))
    screen.blit(score_surface, score_rectangle)
    return score

pygame.init() #start engine of the game, has to be called first
screen = pygame.display.set_mode((800,400))
pygame.display.set_caption('Magikarp Splash') #change into something else related to pokemon?
clock = pygame.time.Clock() #controls framerate
font = pygame.font.Font('font/Pixeltype.ttf', 50) #default font rn
game_active = True
start_time = 0
score = 1
bg_music = pygame.mixer.Sound('audio/1-07 Lake.mp3')
bg_music.set_volume(0.1)
bg_music.play(loops=-1)

# evolution game clear
evolution_sound = pygame.mixer.Sound('audio/31 Fanfare- Evolution.mp3')
evolution_sound.set_volume(0.1)
gyarados_surface = pygame.image.load('graphics/gyarados/1.png')
gyarados_surface = pygame.transform.scale2x(gyarados_surface)
gyarados_rectangle = gyarados_surface.get_rect(center = (400,200))
game_clear = font.render('Your Magikarp evolved into a Gyarados!', False, (64,64,64))
game_clear_2 = font.render('Press SPACE to play again', False, (64,64,64))
game_clear_rectangle = game_clear.get_rect(center = (400, 315))
game_clear_rectangle_2 = game_clear_2.get_rect(center = (400, 360))
sound = True

player = pygame.sprite.GroupSingle()
player.add(Player())

obstacle_group = pygame.sprite.Group()
level_up_group = pygame.sprite.Group()

image_size = (800, 400)
underwater_surface = pygame.image.load('graphics/background/underwater2.png').convert_alpha()
underwater_surface = pygame.transform.scale(underwater_surface, image_size)

# intro screen
magikarp_surface = pygame.image.load('graphics/magikarp/1.png').convert_alpha()
magikarp_surface = pygame.transform.scale2x(magikarp_surface)
magikarp_surface_rectangle = magikarp_surface.get_rect(center = (400,200))
game_name = font.render('Magikarp Splash', False, (64,64,64))
game_name_rectangle = game_name.get_rect(center = (400, 80))
game_instruction = font.render('Press SPACE to splash', False, (64,64,64))
game_instruction_2 = font.render('Get to level 20 to evolve Magikarp', False, (64,64,64))
game_instruction_rectangle = game_instruction.get_rect(center = (400, 315))
game_instruction_rectangle_2 = game_instruction_2.get_rect(center = (400, 360))

# timer
obstacle_timer = pygame.USEREVENT + 1
pygame.time.set_timer(obstacle_timer, 1500)


# while True loop keeps game running, without this loop the screen window would only open for a split second
while True: 
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()

        if game_active:
            if randint(0,2) and event.type == obstacle_timer:
                obstacle_group.add(Obstacle('remoraid'))
            elif event.type == obstacle_timer:
                level_up_group.add(Level('rare candy'))
        
        
        else:
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                game_active = True
                score = 1
    
    if game_active:
        # draw surfaces
        screen.blit(underwater_surface,(0,0)) 
        # screen.blit(ground_surface,(0,300)) #loads ground
        score = display_score()

        player.draw(screen)
        player.update()

        obstacle_group.draw(screen)
        obstacle_group.update()

        level_up_group.draw(screen)
        level_up_group.update()

        # game over
        game_active = collision_sprite()

        if score == 20:
        # change magikarp character into gyarados
            if sound == True:
                evolution_sound.play()
                sound = False
            screen.fill((94,129,169))
            screen.blit(game_name, game_name_rectangle)
            screen.blit(gyarados_surface, gyarados_rectangle)
            screen.blit(game_clear, game_clear_rectangle)
            screen.blit(game_clear_2, game_clear_rectangle_2)

    # menu screen
    else:
        screen.fill((94,129,169))
        screen.blit(magikarp_surface, magikarp_surface_rectangle)
        player_gravity = 0 # reset
        score_message = font.render(f'You got to level: {score}', False,(64,64,64))
        score_message_rectangle = score_message.get_rect(center = (400,315))

        # game over text
        screen.blit(game_name, game_name_rectangle)
        
        if score == 1: 
            screen.blit(game_instruction, game_instruction_rectangle)
            screen.blit(game_instruction_2, game_instruction_rectangle_2)
        else: screen.blit(score_message, score_message_rectangle) 
        
    pygame.display.update() # updates display surface
    clock.tick(60) # while loop will not run faster than 60 frames per second (max frame rate)




